datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  accounts             Account[]
  personal             Personal?            @relation("UserPersonal")
  isTwoFactorEnabled   Boolean              @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  role                 UserRole             @default(APPLICANT)

  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id       String   @id @default(cuid())
  userId   String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Personal {
  id          String     @id @default(cuid())
  userId      String     @unique
  firstName   String
  middleName  String?
  lastName    String
  dob         DateTime
  mobile      String
  gender      String
  address     Address?
  family      Family?
  education   Education?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserPersonal")
}

model Address {
  id                  String     @id @default(cuid())
  personalId          String     @unique
  houseNumStreetName  String
  barangay            String
  cityMunicipality    String
  province            String
  region              String
  zipCode             String

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  personal            Personal   @relation(fields: [personalId], references: [id], onDelete: Cascade)
}

model Family {
  id                            String     @id @default(cuid())
  personalId                    String     @unique
  motherName                    String
  motherOccupation              String
  motherAnnualIncome            String
  motherMobileNum               String
  fatherName                    String
  fatherOccupation              String
  fatherAnnualIncome            String
  fatherMobileNum               String
  guardianName                  String
  guardianRelationshipToApplicant String
  guardianMobileNum             String

  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt

  personal                      Personal   @relation(fields: [personalId], references: [id], onDelete: Cascade)
}

model Education {
  id                            String     @id @default(cuid())
  personalId                    String     @unique
  trackName                     String
  strandName                    String
  shsSchoolYearGraduated        String
  shsGwa                        String
  shsSchoolName                 String
  shsSchoolAddress              String
  shsSchoolContactNum           String

  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt

  personal                      Personal   @relation(fields: [personalId], references: [id], onDelete: Cascade)
}

enum UserRole {
  APPLICANT
  SCHOLAR
  ADMIN
  MANAGER
}
